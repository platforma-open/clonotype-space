self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")

self.defineOutputs("umapTsVFile", "umapOutput")

self.body(func(args) {
    // Input parameters
    umapTable := args.umapTable
    umap_neighbors := args.umap_neighbors
    umap_min_dist := args.umap_min_dist
    mem := args.mem
    cpu := args.cpu

    // UMAP software execution
    umapClones := exec.builder().
        software(assets.importSoftware("@platforma-open/milaboratories.clonotype-space.umap:main")).
        mem(string(mem) + "GiB").
        cpu(1).
        addFile("sequences.tsv", umapTable).
        arg("-i").arg("sequences.tsv").
        arg("-u").arg("umap.tsv").
        arg("--umap-neighbors").arg(string(umap_neighbors)).
        arg("--umap-min-dist").arg(string(umap_min_dist)).
        saveFile("umap.tsv").
        saveFile("skipped_clonotypes_summary.txt").
        printErrStreamToStdout().
        // saveStdoutContent().
        cache(24 * 60 * 60 * 1000).
        run()

    // Get stdout output and UMAP file now while we have the raw exec object
    umapOutput := umapClones.getStdoutStream()
    umapTsVFile := umapClones.getFile("umap.tsv")

    return {
        umapTsVFile: umapTsVFile,
        umapOutput: umapOutput
    }
})

