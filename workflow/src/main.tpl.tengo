wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")

xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

slices := import("@platforma-sdk/workflow-tengo:slices")
umapConv := import(":pf-umap-conv")

pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

wf.prepare(func(args){
	// We need a table with cluster ID (optional) | clonotype id | selected ranking columns

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.inputAnchor)

	// Add full aa sequence column
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/vdj/isMainSequence": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid"
		}
	}, "aaSequence")

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	// Input arguments
	columns := args.columns
	datasetSpec := columns.getSpec(args.inputAnchor)
	umap_neighbors := args.umap_neighbors
	umap_min_dist := args.umap_min_dist

	if is_undefined(umap_neighbors) || is_undefined(umap_min_dist) {
		ll.panic("umap_neighbors or umap_min_dist is undefined")
	}

	// Needed conditional variables
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"

	// output containers
	outputs := {}

	////////// UMAP //////////
	// Generate input TSV with Clonotype ID and aa sequence
	umapTable := pframes.tsvFileBuilder()
	umapTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
	for col in columns.getColumns("aaSequence") {
		if isSingleCell {
			chainLabel := col.spec.domain["pl7.app/vdj/scClonotypeChain"]
			umapTable.add(col, {header: "aaSequence." + chainLabel})
		} else {
			chainLabel := col.spec.axesSpec[0].domain["pl7.app/vdj/chain"]
			umapTable.add(col, {header: "aaSequence." + chainLabel})
		}
	}
	umapTable = umapTable.build()

	// UMAP script should go here
	umapClones := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-space.umap:main")).
		addFile("sequences.tsv", umapTable).
		arg("-i").arg("sequences.tsv").
		arg("-u").arg("umap.tsv").
		arg("--umap-neighbors").arg(string(umap_neighbors)).
		arg("--umap-min-dist").arg(string(umap_min_dist)).
		saveFile("umap.tsv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()


	umapPf := xsv.importFile(
		umapClones.getFile("umap.tsv"),
		"tsv",
		umapConv.getColumns(datasetSpec, blockId),
		{ splitDataAndSpec: true })

	// Make trace
    trace := pSpec.makeTrace(datasetSpec,
        {
            type: "milaboratories.clonotype-space",
            importance: 30,
            label: "Clonotype Space"
        })

	pf := pframes.pFrameBuilder()
	for k, v in umapPf {
		pf.add(k, trace.inject(v.spec), v.data)
	}
	pf = pf.build()

	return {
		outputs: {
			umapPf: pframes.exportFrame(pf)
		},
		exports: {
			umapPf: pf
		}
	}
})
