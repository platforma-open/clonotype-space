wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")

xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

slices := import("@platforma-sdk/workflow-tengo:slices")
umapConv := import(":pf-umap-conv")



// Input will be table with clonotype id | sequence to

// Output should be UMAP coordinates. (maybe embeddings too?)







wf.prepare(func(args){
	// We need a table with cluster ID (optional) | clonotype id | selected ranking columns

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.inputAnchor) 
	

	// Add full aa sequence column
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/vdj/isAssemblingFeature": "true",
			"pl7.app/vdj/isMainSequence": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid"
		}
	}, "aaSequence")

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	// Input arguments
	columns := args.columns
	datasetSpec := columns.getSpec(args.inputAnchor)
	
	// Needed conditional variables
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"
	
	// output containers 
	outputs := {}

	////////// UMAP //////////
	// Generate input TSV with Clonotype ID and aa sequence
	umapTable := columns.xsvTableBuilder()
	umapTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
	for col in columns.getColumns("aaSequence") {
		if isSingleCell {
			chainLabel := col.spec.domain["pl7.app/vdj/scClonotypeChain"]
			umapTable.add(col.key, {header: "aaSequence." + chainLabel})
		} else {
			chainLabel := col.spec.axesSpec[0].domain["pl7.app/vdj/chain"]
			umapTable.add(col.key, {header: "aaSequence." + chainLabel})
		}
	}
	umapTable = umapTable.build("tsv")

	// UMAP script should go here
	umapClones := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-space.umap:main")).
		addFile("sequences.tsv", umapTable).
		arg("-i").arg("sequences.tsv").
		arg("-u").arg("umap.tsv").
		saveFile("umap.tsv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()


	umapPf := xsv.importFile(umapClones.getFile("umap.tsv"), "tsv", umapConv.getColumns(datasetSpec))

	outputs["umap"] = pframes.exportFrame(umapPf)

	// Prepare exports
	exports := {
        UMAP1: {
            spec: umapPf["umap1.spec"],
            data: umapPf["umap1.data"]
            },
		UMAP2: {
            spec: umapPf["umap2.spec"],
            data: umapPf["umap2.data"]
            }
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
