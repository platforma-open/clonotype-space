wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")

xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
render := import("@platforma-sdk/workflow-tengo:render")
slices := import("@platforma-sdk/workflow-tengo:slices")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

umapTpl := assets.importTemplate(":umap")

wf.prepare(func(args){
	// We need a table with cluster ID (optional) | clonotype id | selected ranking columns

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.inputAnchor) 

	// Add full aa sequence column
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/vdj/isMainSequence": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid"
		}
	}, "aaSequence")

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	// Input arguments
	columns := args.columns
	datasetSpec := columns.getSpec(args.inputAnchor)
	
	// Needed conditional variables
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"
	
	// output containers 
	outputs := {}

	// Generate input TSV with Clonotype ID and aa sequence
	umapTable := pframes.tsvFileBuilder()
	umapTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
	for col in columns.getColumns("aaSequence") {
		if isSingleCell {
			chainLabel := col.spec.domain["pl7.app/vdj/scClonotypeChain"]
			umapTable.add(col, {header: "aaSequence." + chainLabel})
		} else {
			chainLabel := col.spec.axesSpec[0].domain["pl7.app/vdj/chain"]
			umapTable.add(col, {header: "aaSequence." + chainLabel})
		}
	}
	umapTable.mem("16GiB")
	umapTable.cpu(1)
	umapTable = umapTable.build()

	// Run script to check if input table is empty
	emptyCheck := exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.clonotype-space.empty-check:main")).
			mem("16GiB").
			cpu(1).
			addFile("sequences.tsv", umapTable).
			arg("--output").arg(".").
			arg("--input").arg("sequences.tsv").
			arg("--input-separator").arg("\t").
			saveFileContent("isFileEmpty.txt").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()
	
	////////// UMAP //////////
	// get check content to be resolved in sub-template
	emptyOrNot := emptyCheck.getFileContent("isFileEmpty.txt")

	// Run UMAP template
	// Analysis will only run if result from emptyOrNot is "notEmpty"
	umapAnalysis := render.create(umapTpl, {
		emptyOrNot: emptyOrNot,
		umapTable: umapTable,
		datasetSpec: datasetSpec,
		blockId: blockId
	})

	// Gather results from continueCheck template
	umapPf := umapAnalysis.output("pf", 24 * 60 * 60 * 1000)
	inputState := umapAnalysis.output("inputState", 24 * 60 * 60 * 1000)

	return {
		outputs: {
			umapPf: pframes.exportFrame(umapPf),
			inputState: inputState
		},
		exports: {
			umapPf: umapPf
		}
	}
})
